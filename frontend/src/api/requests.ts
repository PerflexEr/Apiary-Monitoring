// frontend/src/api/requests.ts
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig } from 'axios';

// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
const createApiInstance = (servicePath: string) => {
  const api = axios.create({
    baseURL: servicePath,
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    },
    timeout: 15000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
    // withCredentials —É–±–∏—Ä–∞–µ–º - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç CORS –ø—Ä–æ–±–ª–µ–º—ã
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º
  api.interceptors.request.use(
    (config) => {
      console.log(`üöÄ Making ${config.method?.toUpperCase()} request to: ${config.baseURL}${config.url}`);
      
      const token = localStorage.getItem('token');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log('üîë Added token to request');
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üìã Request headers:', config.headers);
      
      return config;
    },
    (error) => {
      console.error('‚ùå Request error:', error);
      return Promise.reject(error);
    }
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
  api.interceptors.response.use(
    (response) => {
      console.log('‚úÖ Response:', response.status, response.config.url);
      
      // –õ–æ–≥–∏—Ä—É–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (response.headers['access-control-allow-origin']) {
        console.log('üåê CORS Origin:', response.headers['access-control-allow-origin']);
      }
      
      return response;
    },
    (error: AxiosError<{ detail?: string | string[] }>) => {
      console.error('‚ùå Response error:', error.response?.status, error.response?.data);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CORS –æ—à–∏–±–æ–∫
      if (error.code === 'ERR_NETWORK') {
        console.error('üö´ Network error - possible CORS issue or server unavailable');
      }
      
      if (error.response?.status === 0) {
        console.error('üö´ Status 0 - likely CORS preflight failure');
      }

      if (error.response?.status === 401) {
        console.warn('üîí Unauthorized - removing token and redirecting to login');
        localStorage.removeItem('token');
        if (!window.location.pathname.includes('/login')) {
          window.location.href = '/login';
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      let errorMessage = 'An error occurred';
      
      if (error.code === 'ERR_NETWORK') {
        errorMessage = 'Network Error - Please check if the server is running and CORS is configured correctly';
      } else if (error.response?.data?.detail) {
        if (Array.isArray(error.response.data.detail)) {
          errorMessage = error.response.data.detail[0];
        } else {
          errorMessage = error.response.data.detail;
        }
      } else if (error.message) {
        errorMessage = error.message;
      }

      return Promise.reject({
        message: errorMessage,
        status: error.response?.status,
        data: error.response?.data,
        code: error.code
      });
    }
  );

  return api;
};

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –±–∞–∑–æ–≤—ã–º–∏ URL
export const authApi = createApiInstance(''); // –î–ª—è auth service (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)
export const hivesApi = createApiInstance('/hives'); // –î–ª—è hive service (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)
export const monitoringApi = createApiInstance('/monitoring'); // –î–ª—è monitoring service (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)
export const notificationsApi = createApiInstance('/notifications'); // –î–ª—è notification service (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
export const checkServiceHealth = async () => {
  const services = [
    { name: 'Auth', api: authApi, endpoint: '/health' },
    { name: 'Hives', api: hivesApi, endpoint: '/health' },
    { name: 'Monitoring', api: monitoringApi, endpoint: '/health' },
    { name: 'Notifications', api: notificationsApi, endpoint: '/health' },
  ];

  const results = await Promise.allSettled(
    services.map(async (service) => {
      try {
        const response = await service.api.get(service.endpoint);
        return { name: service.name, status: 'healthy', data: response.data };
      } catch (error) {
        return { name: service.name, status: 'unhealthy', error };
      }
    })
  );

  return results.map((result, index) => ({
    service: services[index].name,
    ...(result.status === 'fulfilled' ? result.value : { status: 'error', error: result.reason })
  }));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤–æ –≤—Å–µ API –∏–Ω—Å—Ç–∞–Ω—Å—ã
export const setAuthToken = (token: string | null) => {
  const apis = [authApi, hivesApi, monitoringApi, notificationsApi];
  
  apis.forEach(api => {
    if (token) {
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    } else {
      delete api.defaults.headers.common['Authorization'];
    }
  });
};